<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Welcome</title>
    <url>/2021/06/28/Welcome/</url>
    <content><![CDATA[<center>我是呆唯，这是我用来学习娱乐的地方!</center>

]]></content>
  </entry>
  <entry>
    <title>基于hexo+github pages搭建博客</title>
    <url>/2021/06/30/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在有很多搭建博客的主流框架，hexo就是其中之一。除了hexo和github之外还需要其他大大小小的工具来进行搭建，这里不多说，正文当中都会讲到。这篇文章用于记录我建立该个人博客的过程，同时与大家分享。如果有错误的地方欢迎指正。可以在文章下方或者留言板提出来。</p>
<img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630201749374.png" alt="image-20210630201749374" style="zoom: 25%;">

<span id="more"></span>

<h1 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h1><p>打开<a href="https://github.com/" title="Github官网">Github官网</a>进行注册。这里就不赘述，就是正常的注册步骤，不懂也可以百度Github注册步骤。</p>
<h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><p>在搭建博客的整个过程都离不开git的使用。所以我们需要安装并学会git的基本操作。打开<a href="https://git-scm.com/" title="git官网">git官网</a>，点击图中的Downloads：<img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630165138545.png" alt="image-20210630165138545"></p>
<p>选择自己的操作系统进行下载，如windows：<img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630165533272.png" alt="image-20210630165533272"></p>
<p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630165756310.png" alt="image-20210630165756310"></p>
<p>选择合适的路径下载下来后就可以双击打开安装了。这里的安装基本可以一路Next，但是建议可以自己更改一下安装路径。如果不会安装或者想了解当中的属性信息，可以自行百度。安装完成之后，可以在桌面鼠标右键看见下图红框内容：</p>
<p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630170433859.png" alt="image-20210630170433859"></p>
<p>点击Git Bash Here，打开git面板，输入git回车来验证git是否安装成功：</p>
<p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630170756373.png" alt="image-20210630170756373"></p>
<p>出现以下内容说明安装成功：</p>
<p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630170839446.png" alt="image-20210630170839446"></p>
<p>在最后说一下，git的复制粘贴并不是ctrl+c和ctrl+v,而是ctrl+insert和shift+insert。这个后面可能会经常用到，在这里提前说明。</p>
<h1 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h1><p>下载地址：<a href="https://nodejs.org/en/" title="node.js官网">node.js官网</a></p>
<p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630172817107.png" alt="image-20210630172817107"></p>
<p>如上图选择最常用的版本下载就行了，下载完双击打开可以改一下安装路径，其他一路Next就完事了。如果要看详细的安装步骤，也可以百度得到。</p>
<p>安装成功后，我们需要验证一下是否安装成功。打开cmd（快捷键：windows键+R输入cmd）依次输入：</p>
<blockquote>
<p>node -v</p>
</blockquote>
<blockquote>
<p>npm -v</p>
</blockquote>
<p>结果显示版本信息即说明安装成功：<img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630174341679.png" alt="image-20210630174341679"></p>
<h1 id="设置npm安装全局模块的路径和环境变量"><a href="#设置npm安装全局模块的路径和环境变量" class="headerlink" title="设置npm安装全局模块的路径和环境变量"></a>设置npm安装全局模块的路径和环境变量</h1><p>如果不进行此步骤，安装模块时会默认装到c盘，占用c盘空间，并且可能到时我们后面要安装的hexo不能使用的情况，所以最好设置一下。</p>
<p>首先打开安装node.js位置，在文件夹中创建两个文件夹：node_cache、node_global，如图：<img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630175052107.png" alt="image-20210630175052107"></p>
<p>然后打开cmd，依次输入以下命令：</p>
<blockquote>
<p>npm config set cache “D:\node.js\node_cache”  </p>
<p>npm config set prefix “D:\node.js\node_global”</p>
<p> #这里的路径要根据自己的来填写，还有要用英文的字符，如果使用中文字符会报错，要注意！</p>
</blockquote>
<p>完成后，要配置环境变量：（win10）<strong>打开控制面板–&gt;系统–&gt;高级系统设置–&gt;环境变量</strong>，然后在系统变量中新加一个变量：</p>
<blockquote>
<p>变量名： NODE_PATH</p>
<p>变量值：D:\node.js\node_global\node_modules</p>
</blockquote>
<p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630180112827.png" alt="image-20210630180112827"></p>
<p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630180222240.png" alt="image-20210630180222240"></p>
<p>接着编辑用户变量里的Path，将相应的npm路径改为：D:\node.js\node_global，如下图：<img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630180504698.png" alt="image-20210630180504698"></p>
<p><strong>都完成后记得要一步步点击确定开退出，不能直接关闭！！！</strong></p>
<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>hexo就是个人博客的框架，完成上一步的配置后，我们要通过git去安装hexo。</p>
<p>首先自己在本地选择位置创建一个新的文件夹hexo，进入hexo文件夹，鼠标右键Git Bash Here，然后在git上输入npm命令安装hexo：</p>
<blockquote>
<p>npm install -g hexo-cli</p>
</blockquote>
<p>完成后，输入hexo init 初始化博客。</p>
<p>接着输入hexo g 来生成静态的博客页面：</p>
<p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630183442855.png" alt="image-20210630183442855"></p>
<p>这是就已经在本地生成了博客，输入hexo s 命令来查看：<img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630183703042.png" alt="image-20210630183703042"></p>
<p>在浏览器输入 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以打开最初始的hexo页面，在git控制台按ctrl+c可以关闭服务器。</p>
<p>然而在只是部署在本地而已，想要让别人也访问到你的博客就必须用到github。</p>
<h1 id="github创建仓库"><a href="#github创建仓库" class="headerlink" title="github创建仓库"></a>github创建仓库</h1><p>登录自己的github，创建一个仓库，这个仓库是用来存储生成的静态页面的：</p>
<p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630185655667.png" alt="image-20210630185655667"></p>
<p>点击New后进入该页面：</p>
<p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630190224019.png" alt="image-20210630190224019"></p>
<p>点击Setting设置：</p>
<p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630190406414.png" alt="image-20210630190406414"></p>
<p>划到最下面：<img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630190850710.png" alt="image-20210630190850710"></p>
<p>点击查看Github Pages，出现下图就说明成功：</p>
<p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630191003488.png" alt="image-20210630191003488"></p>
<h1 id="将hexo部署到github"><a href="#将hexo部署到github" class="headerlink" title="将hexo部署到github"></a>将hexo部署到github</h1><p>创建完仓库就可以返回hexo文件夹进行部署。用记事本的方式打开hexo中的_config.yml（我用的是一个小型的代码编辑器，个人认为会比记事本好用，附上下载地址：<a href="https://notepad-plus.en.softonic.com/" title="notepad++">notepad++</a> ):</p>
<p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630191500618.png" alt="image-20210630191500618"></p>
<p>打开后划到最底部，填写以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repository:</span> <span class="string">https://github.com/Aimer21/Aimer21.github.io.git</span> </span><br><span class="line"><span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<p>注意空格：</p>
<p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630195026589.png" alt="image-20210630195026589"></p>
<p>repository如图：</p>
<p><img src="/images/%E5%9F%BA%E4%BA%8Ehexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210630195309757.png" alt="image-20210630195309757"></p>
<p>这里提下关于github的branch，以前github的默认branch名称是master，但是受种族歧视的影响，现在是改为默认为main。我在搭建博客的时候填的是master，踩坑好久才出来，所以说要记住现在的github的branch默认为main！！！！</p>
<p>填写完之后保存回到hexo文件夹，右键Git Bash Here，安装git部署插件，输入以下命令：</p>
<blockquote>
<p>npm install hexo-deployer-git –save</p>
</blockquote>
<p>然后就可以部署了，输入以下三条命令：</p>
<blockquote>
<p>hexo clean   #清除缓存文件db.json和已生成的静态文件public</p>
<p>hexo g   #生成静态文件默认到hexo的public文件夹（hexo generate的缩写）</p>
<p>hexo d   #将静态文件部署到设定的仓库（hexo deployer的缩写）</p>
</blockquote>
<p>完成以后，就可以输入<a href="https://xxx.github.io/">https://xxx.github.io</a> 来访问！xxx是你github的用户名。到此你的博客就可以被别人访问到了，最原始的博客也算搭建完成了！但是这只是开始，你想拥有属于你自己的私人博客，就必须对其进行优化完善！</p>
<p>路漫漫其修远兮，吾将上写而求索。加油共勉！</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/102592286">https://zhuanlan.zhihu.com/p/102592286</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习</title>
    <url>/2021/07/15/MySQL%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习记录</p>
<img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210715203717568.png" alt="image-20210715203717568" style="zoom:25%;" />

<span id="more"></span>

<h2 id="1、SQL语句分类"><a href="#1、SQL语句分类" class="headerlink" title="1、SQL语句分类"></a>1、SQL语句分类</h2><ol>
<li>DQL(数据查询语言)：select</li>
<li>DML(数据操作语言)：delete insert update</li>
<li>DDL(数据定义语言)：create drop alter  //对表结构的操作</li>
<li>TCL(事务控制语言)：commit提交事务 rollback回滚事务</li>
<li>DCL(数据控制语言)：grant授权 revoke撤销权限</li>
</ol>
<h2 id="2、MySQL基础学习命令报错记录"><a href="#2、MySQL基础学习命令报错记录" class="headerlink" title="2、MySQL基础学习命令报错记录"></a>2、MySQL基础学习命令报错记录</h2><ul>
<li><p>Unknown command ‘\‘                     原因：使用的字符集不一致，反斜杠被当成转义字符</p>
</li>
<li><p>…</p>
</li>
</ul>
<h2 id="3、dos操作MySQL基础学习常用命令"><a href="#3、dos操作MySQL基础学习常用命令" class="headerlink" title="3、dos操作MySQL基础学习常用命令"></a>3、dos操作MySQL基础学习常用命令</h2><ul>
<li>select version();     <strong>查询MySQL基础学习版本</strong></li>
<li>MySQL基础学习 -u 用户名 -p 密码     <strong>登录MySQL基础学习</strong></li>
<li>source     <strong>导入sql脚本</strong></li>
<li>MySQL基础学习dump 数据库名&gt;路径(路径包含文件名，如：<strong>D:\s.sql</strong>) -u  用户名 -p 密码      <strong>导出sql脚本</strong></li>
<li>create database  xxx;   <strong>创建数据库</strong></li>
<li>drop database xxx;     <strong>删除数据库</strong></li>
<li>show databases;     <strong>查看所有的数据库</strong>  </li>
<li>use xxx   <strong>使用数据库</strong></li>
<li>show tables;     <strong>查看数据库中的所有表</strong></li>
<li>exit     <strong>退出</strong></li>
<li>desc xxx(表)    <strong>查看表的结构</strong></li>
<li>\c     <strong>结束一条语句</strong></li>
<li>show create table xxx(表名)     <strong>查看创建表的语句</strong></li>
<li>…</li>
</ul>
<h2 id="4、select语句注意点"><a href="#4、select语句注意点" class="headerlink" title="4、select语句注意点"></a>4、select语句注意点</h2><p>脚本链接：<a href="https://pan.baidu.com/s/1wkT_oHur70feJ8-JUmFT3w">https://pan.baidu.com/s/1wkT_oHur70feJ8-JUmFT3w</a> 提取码：0717 </p>
<h3 id="4-1简单的查询"><a href="#4-1简单的查询" class="headerlink" title="4.1简单的查询"></a>4.1简单的查询</h3><ul>
<li><p>as (字段重命名，省略也可以)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select deptno (as) no from dept;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/1.png" alt="1"></p>
<h3 id="4-2条件查询"><a href="#4-2条件查询" class="headerlink" title="4.2条件查询"></a>4.2条件查询</h3><ul>
<li><p>between and（&gt;= and &lt;=）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ename from emp where sal &gt;= 1100 and sal &lt;= 3000;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ename from emp where sal between 1100 and 3000;</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210711174056620.png" alt="image-20210711174056620"></p>
</li>
</ul>
<p> between and也可以用在字符串方面（<strong>左闭右开</strong>）</p>
<ul>
<li><p><strong><strong style=color:red>is null (不能用 = null)</strong></strong></p>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210711175234647.png" alt="image-20210711175234647"></p>
</li>
<li><p>in 等同于 or （not in同理）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ename from emp where job = &#x27;salesman&#x27; or job = &#x27;manager&#x27;;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210711181618269.png" alt="image-20210711181618269"></p>
<ul>
<li><p>模糊查询like</p>
<p>需要注意两个符号：**%<strong>代表任意多个字符，</strong>_**代表任意一个字符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ename from emp where ename like &#x27;%a%&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ename from emp where ename like &#x27;_a%&#x27;;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210711182834130.png" alt="image-20210711182834130"></p>
<h3 id="4-3排序-order-by-字段-asc-desc"><a href="#4-3排序-order-by-字段-asc-desc" class="headerlink" title="4.3排序 (order by + 字段 + asc/desc)"></a>4.3排序 (order by + 字段 + asc/desc)</h3><p><strong>默认升序。</strong> <strong>asc：升序</strong>      <strong>desc：降序</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ename, sal from emp order by sal; //默认升序</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210711183943378.png" alt="image-20210711183943378"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ename, sal from emp order by sal desc;//降序</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210711184234450.png" alt="image-20210711184234450"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ename, sal from emp order by sal desc, ename asc;</span><br><span class="line">//按sal降序排序，如果sal相同再按ename升序排序</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210711184659916.png" alt="image-20210711184659916"></p>
<h3 id="4-4分组函数（多行处理函数）"><a href="#4-4分组函数（多行处理函数）" class="headerlink" title="4.4分组函数（多行处理函数）"></a>4.4分组函数（多行处理函数）</h3><ul>
<li>count 计数</li>
<li>sum 求和</li>
<li>avg 平均值</li>
<li>max 最大值</li>
<li>min 最小值</li>
</ul>
<p><strong><span style="color:red">分组函数不能直接使用在where子句中（group by 在where后执行）</span></strong></p>
<p>count(*):总记录条数</p>
<p>count(具体某个字段)：忽略null的记录条数</p>
<p>所有数据库中，只要有null参与数据运算，运算结果一定是null。（<strong style="color:red;">分组函数自动忽略null</strong>）</p>
<p>可以用ifnull()空处理函数。 </p>
<p>ifnull(需要处理的字段，替换null的值)</p>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210711200621372.png" alt="image-20210711200621372"></p>
<h3 id="4-5-group-by-和-having"><a href="#4-5-group-by-和-having" class="headerlink" title="4.5 group by 和 having"></a>4.5 group by 和 having</h3><p><strong>group by：按照某个字段或者某些字段分组</strong></p>
<p><strong>having：对分组后的数据再次过滤</strong></p>
<p>当sql语句有group by的话，select后面只能有分组函数的字段和分组的字段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ename,max(sal) from emp group by job;//有查询结果，但是没有意义。(数据不对应)</span><br></pre></td></tr></table></figure>

<p>只能有max(sal),job:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select job,max(sal) from emp group by job;//查询每个岗位的最高工资</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210711205543349.png" alt="image-20210711205543349"></p>
<p>联合分组:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select deptno,job,max(sal) from emp group by deptno,job;//查询每个部门每个岗位的最高薪资</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210711210558142.png" alt="image-20210711210558142"></p>
<p>  having和where的选择：</p>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210711211844543.png" alt="image-20210711211844543"></p>
<p>元数据的处理尽量用where，where解决不了的再用having，having必须与group by一起使用。</p>
<h3 id="4-6-sql语句书写和执行顺序"><a href="#4-6-sql语句书写和执行顺序" class="headerlink" title="4.6 sql语句书写和执行顺序"></a>4.6 sql语句书写和执行顺序</h3><p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210711212341072.png" alt="image-20210711212341072"></p>
<h3 id="4-7-查询结果去重（distinct）"><a href="#4-7-查询结果去重（distinct）" class="headerlink" title="4.7 查询结果去重（distinct）"></a>4.7 查询结果去重（distinct）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select distinct job from emp;  //查询所有岗位，去除重复。 </span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713120825948.png" alt="image-20210713120825948"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Select distinct deptno,job from emp order by deptno;//联合去重</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713121249956.png" alt="image-20210713121249956"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(distinct job) from emp;//统计岗位数量</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713121600893.png" alt="image-20210713121600893"></p>
<h3 id="4-8-连接查询"><a href="#4-8-连接查询" class="headerlink" title="4.8 连接查询"></a>4.8 连接查询</h3><p><strong>分类：</strong></p>
<p>内连接</p>
<ul>
<li>​    等值连接</li>
<li>​    非等值连接</li>
<li>​    自连接</li>
</ul>
<p>外连接</p>
<ul>
<li>​    左外连接（左连接）</li>
<li>​    右外连接（右连接）</li>
</ul>
<p>全连接（用得少）（左右都是主表）</p>
<p><strong>笛卡尔积现象：</strong>当两张表进行连接查询时，没有任何限制条件，最终查询结果条数为两张表记录条数的乘积。</p>
<h4 id="4-8-1内连接"><a href="#4-8-1内连接" class="headerlink" title="4.8.1内连接"></a>4.8.1内连接</h4><p><strong>等值连接</strong>（条件是等量关系）</p>
<p>SQL92：（现在不常用）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select dname,ename from emp e, dept d where e.deptno = d.deptno;</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713131434020.png" alt="image-20210713131434020"></p>
<p>SQL99：（常用的）(<strong>后面还可以加where，结构更清晰，表的连接条件和where条件分离</strong>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select d.dname, e.ename from emp e (inner) join dept d on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713131706694.png" alt="image-20210713131706694"></p>
<p><strong>非等值连接</strong>（连接条件中的关系是非等量关系 ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select e.ename, e.sal, s.grade from emp e join salgrade s on e.sal between s.losal and s.hisal order by grade; //每个员工的薪资以及等级</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713133241355.png" alt="image-20210713133241355"></p>
<p><strong>自连接</strong>（一张表看成两张表，自己连接自己）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select e1.ename, e2.ename &#x27;领导&#x27; from emp e1 join emp e2 on e1.mgr = e2.empno;//找出每个员工的上级领导</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713134549010.png" alt="image-20210713134549010"></p>
<h4 id="4-8-2-外连接"><a href="#4-8-2-外连接" class="headerlink" title="4.8.2 外连接"></a>4.8.2 外连接</h4><p>内外连接区别：</p>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713140707471.png" alt="image-20210713140707471"></p>
<p><strong>左(外)连接</strong>（左边为主表）/<strong>右(外)连接</strong>（右边为主表）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select e1.ename, e2.ename &#x27;领导&#x27; from emp e1 left (outer) join emp e2 on e1.mgr = e2.empno;//相比自连接的查询多了一条，如下图</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select e1.ename, e2.ename &#x27;领导&#x27; from emp e2 right (outer) join emp e1 on e1.mgr = e2.empno;//两条sql语句意思一样</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713141528723.png" alt="image-20210713141528723"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select d.dname, e.ename from dept d left join emp e on d.deptno = e.deptno where e.ename is null; //找出哪个部门没有员工</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713142912566.png" alt="image-20210713142912566"></p>
<h4 id="4-8-3-全连接"><a href="#4-8-3-全连接" class="headerlink" title="4.8.3 全连接"></a>4.8.3 全连接</h4><p>左右都为主表</p>
<h4 id="4-8-4-三张表以上连接查询"><a href="#4-8-4-三张表以上连接查询" class="headerlink" title="4.8.4 三张表以上连接查询"></a>4.8.4 三张表以上连接查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select e.ename, d.dname, s.grade from emp e join dept d  on e.deptno = d.deptno join salgrade s on e.sal between s.losal and s.hisal;//每个员工的部门、薪资等级  </span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713151634974.png" alt="image-20210713151634974"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select e.ename, d.dname, s.grade, e1.ename &#x27;领导&#x27; from emp e join dept d  on e.deptno = d.deptno join salgrade s on e.sal between s.losal and s.hisal left join emp e1 on e.mgr = e1.empno;//每个员工的部门、薪资等级 、上级领导</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713152236032.png" alt="image-20210713152236032"></p>
<h3 id="4-9-子查询"><a href="#4-9-子查询" class="headerlink" title="4.9 子查询"></a>4.9 子查询</h3><h4 id="4-9-1-where子句中的子查询"><a href="#4-9-1-where子句中的子查询" class="headerlink" title="4.9.1 where子句中的子查询"></a>4.9.1 where子句中的子查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where sal &gt; (select avg(sal) from emp);//薪资大于平均薪资的员工</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713153855756.png" alt="image-20210713153855756"></p>
<h4 id="4-9-2-from的嵌套子查询"><a href="#4-9-2-from的嵌套子查询" class="headerlink" title="4.9.2 from的嵌套子查询"></a>4.9.2 from的嵌套子查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select t.*, s.grade from (select deptno, avg(sal) avgsal from emp group by deptno) t join salgrade s on t.avgsal between s.losal and s.hisal;//找出每个部门平均薪水的薪资</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713155911336.png" alt="image-20210713155911336"></p>
<h4 id="4-9-3-select嵌套子查询"><a href="#4-9-3-select嵌套子查询" class="headerlink" title="4.9.3 select嵌套子查询"></a>4.9.3 select嵌套子查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select e.ename,e.deptno,(select d.dname from dept d where e.deptno = d.deptno) as dname from emp e;//显示员工对应部门</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713165404078.png" alt="image-20210713165404078"></p>
<h3 id="4-10-union"><a href="#4-10-union" class="headerlink" title="4.10 union"></a>4.10 union</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ename,job from emp where job = &#x27;manager&#x27; union select ename,job from emp where job = &#x27;salesman&#x27;;//找出工作岗位是salesman和manager的员工</span><br></pre></td></tr></table></figure>

<h3 id="4-11-limit"><a href="#4-11-limit" class="headerlink" title="4.11 limit"></a>4.11 limit</h3><p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713165921640.png" alt="image-20210713165921640"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ename,sal from emp order by sal desc limit 0, 5;//取出薪资前5</span><br></pre></td></tr></table></figure>

<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span> limit <span class="number">5</span>;<span class="comment">//默认从第一条取数据</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713170136216.png" alt="image-20210713170136216"></p>
<p><strong>通用标准分页：</strong></p>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713171852440.png" alt="image-20210713171852440"></p>
<h2 id="5-、表"><a href="#5-、表" class="headerlink" title="5 、表"></a>5 、表</h2><h3 id="5-1-创建表"><a href="#5-1-创建表" class="headerlink" title="5.1 创建表:"></a><strong>5.1 创建表:</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line"></span><br><span class="line">	字段名1 数据类型,	</span><br><span class="line"></span><br><span class="line">	字段名2 数据类型 (default 值),	//可以定义默认值</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<p><strong>MySQL基础学习常见数据类型：</strong></p>
<p>int                    </p>
<p>bigint    (java中的long)</p>
<p>float</p>
<p>char    (定长字符串)</p>
<p>varchar    (可变字符串)</p>
<p>date    </p>
<p>BLOB    二进制大对象(存储图片、视频等流媒体信息)     Binary Large Object</p>
<p>CLOB    字符大对象(存储较大文本)     Character Large Object</p>
<p>…</p>
<p><strong>表的复制</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名 as select语句;//创建一张表为as后面的查询结果</span><br></pre></td></tr></table></figure>



<h3 id="5-2-插入数据："><a href="#5-2-插入数据：" class="headerlink" title="5.2 插入数据："></a><strong>5.2 插入数据：</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名 (字段1,字段2,...) values(?, ?,...), (?,?,...)</span><br></pre></td></tr></table></figure>

<p><strong>如果值对应表的全部字段，插入语句可以省略字段的书写</strong></p>
<p><strong>用逗号隔开可以一次插入多条语句</strong></p>
<h3 id="5-3-修改数据"><a href="#5-3-修改数据" class="headerlink" title="5.3 修改数据"></a><strong>5.3 修改数据</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set ... where ... //不加where条件即更新所有记录</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update dept set loc = &#x27;shanghai&#x27; where deptno = 10;//修改10部门的loc为shanghai</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210713182732311.png" alt="image-20210713182732311"></p>
<h3 id="5-4-删除数据"><a href="#5-4-删除数据" class="headerlink" title="5.4 删除数据"></a><strong>5.4 删除数据</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名 where ...;//没有条件全部删除，可会滚</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truncate table 表名; //永久删除，不可会滚</span><br></pre></td></tr></table></figure>



<h3 id="5-5-约束（Constraint）"><a href="#5-5-约束（Constraint）" class="headerlink" title="5.5 约束（Constraint）"></a><strong>5.5 约束</strong>（Constraint）</h3><p>非空约束（not null）</p>
<p>唯一约束（unique）</p>
<p>主键约束（primary key）pk</p>
<p>外键约束 （foreign key）fk</p>
<p>检查约束 （oracle数据库有check约束，MySQL基础学习不支持）</p>
<h4 id="5-5-1非空约束-not-null"><a href="#5-5-1非空约束-not-null" class="headerlink" title="5.5.1非空约束 not null"></a><strong>5.5.1非空约束 not null</strong></h4><h4 id="5-5-2唯一性约束（unique）"><a href="#5-5-2唯一性约束（unique）" class="headerlink" title="5.5.2唯一性约束（unique）"></a><strong>5.5.2唯一性约束（unique）</strong></h4><p>修饰的字段具有唯一性，但可以为null。（数据库中null不是值）</p>
<p>字段联合唯一性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t_user(</span><br><span class="line">    username varchar(255),</span><br><span class="line">	usercode varchar(255),</span><br><span class="line">	unique(username,usercode)//两个字段加起来不能重复</span><br><span class="line">);</span><br><span class="line">区别于：</span><br><span class="line">create table t_user(</span><br><span class="line">	username varchar(255) unique,</span><br><span class="line">	usercode varchar(255) unique</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>前者为表级约束，后者为列级约束。</p>
<h4 id="5-5-3主键约束（primary-key-非空且唯一）"><a href="#5-5-3主键约束（primary-key-非空且唯一）" class="headerlink" title="5.5.3主键约束（primary key 非空且唯一）"></a><strong>5.5.3主键约束</strong>（<strong>primary key 非空且唯一</strong>）</h4><p><strong>两种方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t_user(</span><br><span class="line">    id int primary key,//主键约束 </span><br><span class="line">    username varchar(255)</span><br><span class="line">);//列级约束</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t_user(</span><br><span class="line">	id int,</span><br><span class="line">    username varchar(255),</span><br><span class="line">    primary key(id)</span><br><span class="line">);//表级约束</span><br></pre></td></tr></table></figure>

<p><strong>主键是这行记录在这张表中的唯一标识。一张表只能有一个主键。</strong></p>
<p><strong>主键的分类：</strong></p>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210715132218917.png" alt="image-20210715132218917"></p>
<p>*<strong>MySQL基础学习提供的主键值自增(auto_increment)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t_user(</span><br><span class="line">	id int primary key auto_increment,//主键自增</span><br><span class="line">    username varchar(255)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>（oracle中的自增机制叫做：序列（sequence）对象）</p>
<h4 id="5-5-4-外键约束（foreign-key）减少冗余"><a href="#5-5-4-外键约束（foreign-key）减少冗余" class="headerlink" title="5.5.4 外键约束（foreign key）减少冗余"></a>5.5.4 外键约束（foreign key）减少冗余</h4><p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210715141708492.png" alt="image-20210715141708492"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t_class(</span><br><span class="line">	cno int primary key,</span><br><span class="line">    cname varchar(255),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table t_student(</span><br><span class="line">	sno int primary key,</span><br><span class="line">    sname varchar(255),</span><br><span class="line">    classno int,</span><br><span class="line">    foreign key(classno) references t_class(cno)//外键约束</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>如上图t_class(父)和t_student(子)是父子表关系：</strong></p>
<p>​    删除数据的时候，先删除子表，再删除父表。<br>​    添加数据的时候，先添加父表，在添加子表。<br>​    创建表的时候，先创建父表，再创建子表。<br>​    删除表的时候，先删除子表，在删除父表。</p>
<p><strong>外键可以为null</strong></p>
<p><strong>外键的引用字段必须有唯一性，不一定是主键（一般是主键）</strong></p>
<h2 id="6、存储引擎（了解）"><a href="#6、存储引擎（了解）" class="headerlink" title="6、存储引擎（了解）"></a>6、存储引擎（了解）</h2><p>MySQL基础学习默认的存储引擎是<strong>InnoDB</strong>方式</p>
<p>存储引擎只在MySQL基础学习存在（oracle有对应机制）</p>
<p>MySQL基础学习支持很多存储引擎，每个存储引擎都对应了一种不同的存储方式。</p>
<p>每个存储引擎都有自己的优缺点，在合适的时机选择合适的存储引擎。</p>
<p><strong>查看MySQL基础学习存储引擎的方法：</strong><br><strong>show engines \g</strong></p>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210715145211688.png" alt="image-20210715145211688"></p>
<p><strong>常见的存储引擎</strong></p>
<ul>
<li><p><strong>MyISAM</strong></p>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210715150438432.png" alt="image-20210715150438432"></p>
</li>
<li><p><strong>InnoDB</strong></p>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210715151214165.png" alt="image-20210715151214165"></p>
</li>
<li><p><strong>MEMORY引擎</strong></p>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210715151522508.png" alt="image-20210715151522508"></p>
</li>
</ul>
<h2 id="7、事务（Transaction）"><a href="#7、事务（Transaction）" class="headerlink" title="7、事务（Transaction）"></a>7、事务（Transaction）</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><ul>
<li><strong>什么是事务</strong></li>
</ul>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210715155634398.png" alt="image-20210715155634398"></p>
<ul>
<li><strong>和事务相关的语句只有DML语句（insert、update、delete）</strong></li>
<li><strong>事务存在是为了保证数据的完整性和安全性</strong></li>
<li><strong>一个业务使用1条DML语句可以搞定的话就不需要事务</strong></li>
</ul>
<h3 id="7-2-原理"><a href="#7-2-原理" class="headerlink" title="7.2 原理"></a>7.2 原理</h3><p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210715160717714.png" alt="image-20210715160717714"></p>
<h3 id="7-3四大特性（ACID）"><a href="#7-3四大特性（ACID）" class="headerlink" title="7.3四大特性（ACID）"></a>7.3四大特性（ACID）</h3><ul>
<li><p><strong>原子性</strong></p>
<p>事务是最小的工作单元，不可再分</p>
</li>
<li><p><strong>一致性</strong></p>
<p>事务必须保证多条DML语句同时成功或者同时失败</p>
</li>
<li><p><strong>隔离性</strong></p>
<p>事务A与事务B之间具有隔离，互不干扰</p>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210715164653654.png" alt="image-20210715164653654"></p>
<p>oracel数据库默认的隔离级别是：读已提交</p>
<p>MySQL基础学习数据库默认的隔离级别是：可重复读</p>
</li>
<li><p><strong>持久性</strong></p>
<p>事务一旦提交,它对数据库的改变就应该是永久性的,接下来的其他操作或故障不应该对本次事务的修改有任何影响。</p>
</li>
</ul>
<h2 id="8、索引-Index"><a href="#8、索引-Index" class="headerlink" title="8、索引(Index)"></a>8、索引(Index)</h2><p>索引虽然可以提高检索效率，但是不能随意的添加索引，因为索引也是数据库当中<br>的对象，也需要数据库不断的维护。是有维护成本的。比如，表中的数据经常被修改<br>这样就不适合添加索引，因为数据一旦修改，索引需要重新排序，进行维护。</p>
<p><strong>添加索引就是给某一个字段，或者说某些字段添加索引</strong></p>
<p>什么时候考虑添加索引？</p>
<ul>
<li>数据量庞大</li>
<li>该字段很少进行DML操作</li>
<li>经常出现在where子句中。</li>
</ul>
<p><strong>主键和具有unique约束的字段自动添加索引</strong></p>
<p><strong>创建索引</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create index emp_sal_index on emp(sal);</span><br></pre></td></tr></table></figure>

<p>sal字段使用索引后，用其作为条件(where语句)，只需查询一次就找到</p>
<p>使用前要全表查询(14次)</p>
<p><strong>删除索引</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop index emp_sal_index on emp;</span><br></pre></td></tr></table></figure>



<p><strong>索引的实现原理</strong></p>
<p><a href="https://www.bilibili.com/video/BV1fx411X7BD?p=71&amp;share_source=copy_web">https://www.bilibili.com/video/BV1fx411X7BD?p=71&amp;share_source=copy_web</a></p>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210715182417302.png" alt="image-20210715182417302"></p>
<p><strong>索引采用的的数据结构是：B + Tree</strong></p>
<p><strong>模糊查询（like）第一位是通配符（% _）时无法使用索引</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ename from emp where ename like &#x27;%a%&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="9、视图-View"><a href="#9、视图-View" class="headerlink" title="9、视图(View)"></a>9、视图(View)</h2><p><strong>创建视图</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create view myview as select empno,ename from emp;</span><br></pre></td></tr></table></figure>

<p><strong>删除视图</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop view myview;</span><br></pre></td></tr></table></figure>

<p><strong>对视图进行CRUD，会影响原表</strong></p>
<p><strong>视图的作用</strong></p>
<p>视图可以隐蔽表的实现细节。保密级别较高的系统，数据库只对外提供相关的视图，java程序员<br>只对视图对象进行CRUD.</p>
<h2 id="10、数据库设计三范式（表的设计）（重点，面试经常问）"><a href="#10、数据库设计三范式（表的设计）（重点，面试经常问）" class="headerlink" title="10、数据库设计三范式（表的设计）（重点，面试经常问）"></a>10、数据库设计三范式（表的设计）（重点，面试经常问）</h2><ul>
<li><p>第一范式：任何一张表都应该有主键，并且每个字段原子性不可再分</p>
</li>
<li><p>第二范式：在第一范式的基础上，所有非主键字段完全依赖主键，不能产生部分依赖 </p>
<p><strong>多对多关系如何设计表才会减少冗余？</strong></p>
<p>三张表，关系表两个外键，如下：</p>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210715195254400.png" alt="image-20210715195254400"></p>
</li>
<li><p>第三范式：在第二范式的基础上，所有非主键字段直接依赖主键，不能产生传递依赖</p>
<p><strong>一对多关系如何设计表？</strong></p>
<p>两张表，多的表加外键，如下：</p>
</li>
</ul>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210715141708492.png" alt="image-20210715141708492"></p>
<p><strong>一对一如何设计</strong></p>
<ul>
<li><p>主键共享</p>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210715201330109.png" alt="image-20210715201330109"></p>
</li>
<li><p>外键唯一</p>
<p><img src="/images/MySQL%25E5%259F%25BA%25E7%25A1%2580%25E5%25AD%25A6%25E4%25B9%25A0/image-20210715201347271.png" alt="image-20210715201347271"></p>
</li>
</ul>
<h2 id="11、参考"><a href="#11、参考" class="headerlink" title="11、参考"></a>11、参考</h2><p><a href="https://www.bilibili.com/video/BV1fx411X7BD">https://www.bilibili.com/video/BV1fx411X7BD</a></p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
